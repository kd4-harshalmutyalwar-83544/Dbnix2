import { Col, InputNumber, Modal, Row, Slider, Select, Input, DatePicker } from 'antd';
import React, { useCallback, useContext, useEffect, useState } from 'react';
// import './FileModal.css';
import './ClaudeResponsive.css';
import axios from 'axios';
// import TableFile from './Tablefile';
import TableFile from './Table';
import Pagination from '@mui/material/Pagination';
import Stack from '@mui/material/Stack';
import * as XLSX from 'xlsx';
import Papa from 'papaparse';
// import StateContext from '../../../context/StateContext';
import StateContext from './Statecontext';
import Dropdown from 'rsuite/Dropdown';
import 'rsuite/dist/rsuite.min.css';
import { ThreeDots } from 'react-loader-spinner';
import Box from '@mui/material/Box';
import LinearProgress from '@mui/material/LinearProgress';
import { ToastContainer, toast } from 'react-toastify';
import { IoMdClose } from 'react-icons/io';
import { Select as AntSelect, FormControl, InputLabel, Menu, MenuItem, Button } from '@mui/material';
import CheckboxComponent from './CheckboxComponent';
import { isAfter, startOfDay, subDays } from 'date-fns';
import TextField from '@mui/material/TextField';
import { ArrowDropDownIcon } from '@mui/x-date-pickers';
import moment from 'moment';

const { RangePicker } = DatePicker;
const ClaudeResponsiveModal = (props) => {
    const [modalOpen, setModalOpen] = useState(true);
    
  const { fileNameToSend, apiBaseUrl, setLogoutTimers, folderName, userSubResult, checkedColumns, setCheckedColumns } = useContext(StateContext);
  const [pdata, setPdata] = useState([{}]);
  const [searchPdata, setSearchPdata] = useState([{}]);
  const [checkedColumnOption, setCheckedColumnOption] = useState([]);
  const [fullDataToDownloadLoader, setFullDataToDownloadLoader] = useState(false);
  const [page, setPage] = useState(1);
  const [pageFilter, setPageFilter] = useState(1);
  const [numRows, setNumRows] = useState(1);
  const [accessGranted, setAccessGranted] = useState(true);
  const [file_Modal_Loader, setFile_Modal_Loader] = useState(false);
  const [sortColumn, setSortColumn] = useState('');
  const [sortOrder, setSortOrder] = useState('');
  const [noData, setNoData] = useState(false);
  const [noDataError, setNoDataError] = useState(false);
  const [dateFromFile, setDateFromFile] = useState(null);
  const [maxRowsPerSheet, setMaxRowsPerSheet] = useState(700000);
  const userId = sessionStorage.getItem('userId');
  const [cancelTokenSource, setCancelTokenSource] = useState(null);
  const [startDateTable, setStartDate] = useState(null);
  const [endDateTable, setEndDate] = useState(null);
  const [selectedItems, setSelectedItems] = useState();
  const [pageWithDate, setPageWithDate] = useState(false);
  const [OPTIONS, setOPTIONS] = useState([]);
  const [columnOPTIONS, setColumnOPTIONS] = useState([]);
  const [searchTextForFilter, setSearchTextForFilter] = useState('');
  const [dropdownSelectedColumn, setDropdownSelectedColumn] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [showConsentForm, setShowConsentForm] = useState(false);
  const [isChecked, setIsChecked] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [fileDownloadRequest, setFileDownloadRequest] = useState(null);
  const [downloadFileName, setDownloadFileName] = useState();
  const [columns, setColumns] = useState([]);
  const [dropdownSelectedColumnsFormCheckBox, setDropdownSelectedColumnsFormCheckBox] = useState([]);
  const [isOpen, setIsOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  const [subMenuAnchorEl, setSubMenuAnchorEl] = useState(null);
  const [subMenuAnchorEl2, setSubMenuAnchorEl2] = useState(null);
  const [currentSubMenu, setCurrentSubMenu] = useState('');
  const [inputValue, setInputValue] = useState(700000);
  const [valueSearchText, setValueSearchText] = useState('');
  const [selectedSearchColumn, setSelectedSearchColumn] = useState('');

  const userRole = sessionStorage.getItem("userRole") || "";
  const token = sessionStorage.getItem("token");
  const pageSize = 100;

  // Responsive note: You can adjust the modal width via CSS media queries or inline style.
  // For example, we could pass style={{ width: '95%' }} on small screens.
  // (See FileModal.css for media queries.)

  const onChange = (newValue) => {
    if (newValue < 0) {
      setInputValue(1);
    } else {
      setInputValue(newValue);
    }
  };

  const handleClick = (event) => {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () => {
    setAnchorEl(null);
    setSubMenuAnchorEl(null);
    setCurrentSubMenu('');
  };

  const handleSubMenuClick = (event, subMenu) => {
    setCurrentSubMenu(subMenu);
    setSubMenuAnchorEl(event.currentTarget);
  };

  const handleSubMenuClick2 = (event) => {
    setSubMenuAnchorEl2(event.currentTarget);
  };

  const handleToggle = () => {
    setIsOpen(!isOpen);
  };

  const handleCheckboxClick = (e) => {
    // Optional: prevent event propagation if needed
  };

  const from = moment(dateFromFile);

  const disableDate = (current) => {
    if (userRole === 'User ') {
      if (from) {
        const minDate = from.clone().add(-3, 'days');
        return current.isAfter(from, "day") || current.isBefore(minDate, "day");
      }
    } else {
      return current.isAfter(from, "day");
    }
    return false;
  };

  const handleDateChange = (dates) => {
    if (dates && dates.length >= 2) {
      // Responsive note: The date format calculation remains unchanged.
      const [day, month, year] = dateFromFile.split('/').map(Number);
      const formatted_Date = new Date(year, month - 1, day);
      const maxBusinessDate = new Date(Date.parse(formatted_Date));
      const startDateLimit = new Date(maxBusinessDate);
      startDateLimit.setDate(startDateLimit.getDate() - 4);
      const endDateLimit = new Date(maxBusinessDate);
      endDateLimit.setDate(endDateLimit.getDate() + 1);

      let sdate = new Date(dates[0]);
      sdate.setDate(sdate.getDate() + 1);
      let edate = new Date(dates[1]);
      edate.setDate(edate.getDate() + 1);

      if (userRole === 'User') {
        if (edate > endDateLimit) {
          toast.error("End Date is Out of Permitted Range...", { theme: "colored" });
          setPageWithDate(false);
        } else if (sdate < startDateLimit) {
          toast.error("Start Date is Out of Permitted Range...", { theme: "colored" });
          setPageWithDate(false);
        } else {
          setStartDate(sdate.toISOString().split('T')[0]);
          fetchContentInFilesWithDate(fileNameToSend, page);
        }
      } else {
        setStartDate(sdate.toISOString().split('T')[0]);
        fetchContentInFilesWithDate(fileNameToSend, page);
      }
      setEndDate(edate ? edate.toISOString().split('T')[0] : '');
    } else {
      setStartDate(null);
      setEndDate(null);
      setPageWithDate(false);
    }
  };

  const fetchContentInFilesWithDate = async (e, newPage) => {
    setFile_Modal_Loader(true);
    if (valueSearchText.trim() !== '') {
      handleSearchText(newPage, selectedSearchColumn, valueSearchText);
    } else {
      try {
        const getContentInFilesApiUrl = `${apiBaseUrl}api/ReportModules/getModalDataWithDate`;
        const filesResponse = await axios.post(getContentInFilesApiUrl, 
          {
            username: userId,
            filename: fileNameToSend,
            foldername: folderName,
            checkedColumnName: checkedColumns.length > 0 ? checkedColumns : ["*"],
            pagesize: pageSize,
            pagenumber: newPage,
            startDate: startDateTable,
            endDate: endDateTable,
          }, { withCredentials: true });

        if (filesResponse.data === "You don't have access to this data") {
          setAccessGranted(false);
          setFile_Modal_Loader(false);
          setPageWithDate(false);
        } else if (filesResponse.data === "No Data Found" || filesResponse.data.totalCount === 0) {
          setNoData(true);
          setAccessGranted(false);
          setFile_Modal_Loader(false);
          setPageWithDate(false);
        } else {
          setPageWithDate(true);
          const pro = filesResponse.data.data;
          setPdata(pro);
          setSearchPdata(pro);
          setNumRows(filesResponse.data.totalCount);
          setAccessGranted(true);
          setPage(newPage);
          setFile_Modal_Loader(false);
        }
      } catch (error) {
        setPageWithDate(false);
        if (error.response && (error.response.status === 404 || error.response.status === 500)) {
          setNoData(true);
          setAccessGranted(false);
          setNoDataError(true);
        }
        console.error("Error fetching files:", error);
        setFile_Modal_Loader(false);
      }
    }
  };

  useEffect(() => {
    fetchColumns();
  }, []);

  useEffect(() => {
    // Responsive note: This effect will refresh data on changes. You may consider debouncing heavy API calls.
    fetchContentInFiles(fileNameToSend, page);
    fetchMaxDate();
  }, [searchTextForFilter, setCheckedColumns, checkedColumns]);

  const handleChange = (event, value) => {
    if (checkedColumns.length > 0) {
      fetchByColumnName(fileNameToSend, value);
    } else if (pageWithDate === false) {
      fetchContentInFiles(fileNameToSend, value);
    } else {
      fetchContentInFilesWithDate(fileNameToSend, value);
    }
  };

  const getFullFileData = async (filename, fileTypes) => {
    const source = axios.CancelToken.source();
    setCancelTokenSource(source);
    setFullDataToDownloadLoader(true);
    setLogoutTimers(30);
    sessionStorage.setItem("process", true);
    var getFullData = `${apiBaseUrl}api/ReportModules/`;

    try {
      if (valueSearchText !== '') {
        getFullData += 'GenerateFullFileDataFromTableAfterFilter';
        const filesResponse = await axios.post(getFullData, {
          username: userId,
          filename: filename,
          foldername: folderName,
          checkedColumns: checkedColumns.length > 0 ? checkedColumns : ["*"],
          searchColumn: selectedSearchColumn,
          searchValue: valueSearchText,
          startDate: startDateTable,
          endDate: endDateTable,
          fileFormat: fileTypes,
          maxRowsPerSheet: maxRowsPerSheet,
        }, {
          withCredentials: true,
          responseType: 'blob',
          cancelToken: source.token,
        });

        if (filesResponse.status === 200) {
          const blob = new Blob([filesResponse.data], { type: filesResponse.headers['content-type'] });
          const url = window.URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.setAttribute('download', `${downloadFileName}.zip`);
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          setLogoutTimers(5);
          setFullDataToDownloadLoader(false);
          toast.success("Download successfully...", { theme: "colored" });
        } else {
          setFullDataToDownloadLoader(false);
          setLogoutTimers(5);
          toast.error("Something went wrong...", { theme: "colored" });
        }
      } else {
        const fullData = getFullData + `GetAlldataAndGenerateFile`;
        const filesResponse = await axios.post(fullData, {
          "checkedColumns": checkedColumns.length > 0 ? checkedColumns : ["*"],
          "endDate": endDateTable,
          "fileFormat": fileTypes,
          "filename": filename,
          "foldername": folderName,
          "maxRowsPerSheet": maxRowsPerSheet,
          "startDate": startDateTable,
          "username": userId,
        }, {
          headers: {
            'Content-Type': 'application/json',
          },
          withCredentials: true,
          responseType: 'blob',
          cancelToken: source.token,
        });

        if (filesResponse.status === 200) {    
          const blob = new Blob([filesResponse.data], { type: filesResponse.headers['content-type'] });
          const url = window.URL.createObjectURL(blob);
          const link = document.createElement('a');
          link.href = url;
          link.setAttribute('download', `${downloadFileName}.zip`);
          document.body.appendChild(link);
          link.click();
          document.body.removeChild(link);
          setLogoutTimers(5);
          setFullDataToDownloadLoader(false);
          toast.success("Download successfully...", { theme: "colored" });
        } else {
          setFullDataToDownloadLoader(false);
          setLogoutTimers(5);
          toast.error("Something went wrong...", { theme: "colored" });
        }
      }
    } catch (error) {
      console.error("error=:", error);
      if (axios.isCancel(error)) {
        setLogoutTimers(5);
        setFullDataToDownloadLoader(false);
      } else {
        console.error("Error fetching files:", error);
        toast.error("Something went wrong...", { theme: "colored" });
        setLogoutTimers(5);
        setFullDataToDownloadLoader(false);
      }
      setLogoutTimers(5);
      setFullDataToDownloadLoader(false);
    } finally {
      sessionStorage.setItem("process", false);
    }
  };

  const cleanupAfterCancel = () => {
    setCancelTokenSource(null);
    setFullDataToDownloadLoader(false);
  };

  const cancelDownload = () => {
    if (cancelTokenSource) {
      cancelTokenSource.cancel('Download canceled');
      sessionStorage.setItem("process", false);
      cleanupAfterCancel();
    }
  };

  const handleConsentBoxChange = (e) => {
    setIsChecked(e.target.checked);
  };

  const handleConsentFormClose = () => {
    setShowConsentForm(false);
    setFileDownloadRequest(null);
    setIsChecked(false);
  };

  const consentUpdate = async () => {
    const consentDetails = {
      "Username": userId,
      "Folder": folderName,
      "file": fileNameToSend,
      "type": fileDownloadRequest,
    };

    try {
      const apiToFetch = `${apiBaseUrl}api/UsersLogs/InsertConsentDetails`;
      const response = await axios.post(apiToFetch, consentDetails, {
        withCredentials: true,
        headers: {
          "Content-Type": "application/json",
        },
      });
      if (response.status === 200) {
        console.error("API ERROR", response);
      }
    } catch (error) {
      console.error("The API error is", error);
    }
  };

  const handleConsentFormSubmit = async () => {
    if (fileDownloadRequest) {
      consentUpdate();
      await performFileDownload(fileDownloadRequest);
      handleConsentFormClose();
    }
  };

  const handleFileDownload = (type) => {
    handleClose();
    setFileDownloadRequest(type);
    setShowConsentForm(true);
    if (startDateTable !== null && endDateTable !== null) {
      setDownloadFileName(fileNameToSend + '(' + startDateTable.toString() + '_' + endDateTable.toString() + ')');
    } else {
      setDownloadFileName(fileNameToSend + '(' + dateFromFile.toString() + ')');
    }
  };

  const performFileDownload = async (e) => {
    // Log user action (userLogs call)
    userLogs();
    sessionStorage.setItem("process", true);
    setFullDataToDownloadLoader(true);

    try {
      if (e.startsWith('F')) {
        if (e === 'Fxlsx') {
          await getFullFileData(fileNameToSend, 'xlsx');
        } else if (e === 'Fcsv') {
          await getFullFileData(fileNameToSend, 'csv');
        } else if (e === 'Fhtxt') {
          await getFullFileData(fileNameToSend, 'htxt');
        } else if (e === 'Ftxt') {
          await getFullFileData(fileNameToSend, 'txt');
        }
      } else {
        if (e === 'Cxlsx') {
          const ws = XLSX.utils.json_to_sheet(pdata);
          const wb = XLSX.utils.book_new();
          XLSX.utils.book_append_sheet(wb, ws, 'Sheet1');
          XLSX.writeFile(wb, `${downloadFileName}.xlsx`);
        } else if (e === 'Ccsv') {
          const csv = Papa.unparse(pdata);
          const blob = new Blob([csv], { type: 'text/csv' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `${downloadFileName}.csv`;
          a.click();
          URL.revokeObjectURL(url);
        } else if (e === 'Chtxt') {
          const tabSeparatedContent = convertToText(pdata);
          const blob = new Blob([tabSeparatedContent], { type: 'text/plain' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `${downloadFileName}.txt`;
          a.click();
          URL.revokeObjectURL(url);
        } else if (e === 'Ctxt') {
          const tabSeparatedContent = convertToTextWithoutHeader(pdata);
          const blob = new Blob([tabSeparatedContent], { type: 'text/plain' });
          const url = URL.createObjectURL(blob);
          const a = document.createElement('a');
          a.href = url;
          a.download = `${downloadFileName}.txt`;
          a.click();
          URL.revokeObjectURL(url);
        }
      }
    } catch (error) {
      console.error("Error:", error);
    } finally {
      setFullDataToDownloadLoader(false);
      setIsChecked(false);
      sessionStorage.setItem("process", false);
    }
    // Additional catch block to ensure fullDataToDownloadLoader is reset
    try {
    } catch (error) {
      console.error("Error during file download:", error);
      toast.error("Something went wrong during the download...", { theme: "colored" });
    } finally {
      setFullDataToDownloadLoader(false);
      sessionStorage.setItem("process", false);
    }
  };

  const convertToText = (data) => {
    if (!data || data.length === 0) return '';
    
    const columns = Object.keys(data[0]);
    const colWidths = columns.map((col) =>
      Math.max(col.length, ...data.map((row) => (row[col] ? row[col].toString().length : 0)))
    );
  
    const header = columns.map((col, i) => col.padEnd(colWidths[i])).join('\t');
    const separator = colWidths.map((width) => ''.repeat(width)).join('\t');
  
    const rows = data.map((row) =>
      columns.map((col, i) => (row[col] ? row[col].toString().padEnd(colWidths[i]) : ' '.repeat(colWidths[i]))).join('\t')
    );
  
    return [header, separator, ...rows].join('\n');
  };

  const convertToTextWithoutHeader = (data) => {
    if (!data || data.length === 0) return '';
  
    const columns = Object.keys(data[0]);
    const colWidths = columns.map((col) =>
      Math.max(col.length, ...data.map((row) => (row[col] ? row[col].toString().length : 0)))
    );
  
    const separator = colWidths.map((width) => ''.repeat(width)).join('\t');
  
    const rows = data.map((row) =>
      columns.map((col, i) => (row[col] ? row[col].toString().padEnd(colWidths[i]) : ' '.repeat(colWidths[i]))).join('\t')
    );
  
    return [separator, ...rows].join('\n');
  };

  const sendEmail = async () => {
    const mailDataToSend = {
      "to": [userId],
      "subject": `${userId} Downloaded ${fileNameToSend} File`,
      "body": `<html>
                  <p>Dear User,</p>
                  <p>This is to confirm that ${userId} has downloaded the file ${fileNameToSend} from our system.</p>
                  <p>Thank you for using our services.</p>
                  <p>Sincerely,</p>
                  <p>The ICICIHFC</p>
                </html>`
    };

    try {
      const apiToFetch = `${apiBaseUrl}api/Email/SendEmail`;
      const response = await axios.post(apiToFetch, mailDataToSend, {
        withCredentials: true,
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.status === 200) {
        // Email sent successfully
      } else {
        console.error("API ERROR", response)
      }
    } catch (error) {
      console.error("The API Error is", error);
    }
  };

  const userLogs = async () => {
    const mailDataToSend = {
      "username": userId,
      "action": "Download",
      "downloadUploadFile": fileNameToSend
    };

    try {
      const apiToFetch = `${apiBaseUrl}api/UsersLogs/UserAction`;
      const response = await axios.post(apiToFetch, mailDataToSend, {
        withCredentials: true,
        headers: {
          "Content-Type": "application/json",
        },
      });

      if (response.status === 200) {
      } else {
        console.error("API ERROR", response);
      }
    } catch (error) {
      console.error("The API error", error);
    }
  };

  const handleSort = (numRows) => {
    setNumRows(numRows);
  };

  const debounce = (func, delay) => {
    let timeoutId;
    return (...args) => {
      if (timeoutId) clearTimeout(timeoutId);
      timeoutId = setTimeout(() => func(...args), delay);
    };
  };

  const debouncedSearchTextData = useCallback(debounce((page, column, searchText) => {
    handleSearchText(page, column, searchText);
  }, 1000), []);

  const handleAllTextSearch = (e) => {
    const searchValueText = e.target.value;
    console.log("search text", searchValueText);
    setSearchTextForFilter(searchValueText);
    if (searchValueText === '') {
      debouncedSearchTextData(1, dropdownSelectedColumn, '');
    } else {
      debouncedSearchTextData(1, dropdownSelectedColumn, searchValueText);
    }
  };

  const handleSearchText = async (newPage, column, searchText) => {
    setValueSearchText(searchText);
    setSelectedSearchColumn(column);
    setFile_Modal_Loader(true);

    try {
      const urlForApi = `${apiBaseUrl}api/ReportModules/GetDataFromTableAfterFilter`;

      const filesResponse = await axios.post(urlForApi, {
        username: userId,
        filename: fileNameToSend,
        foldername: folderName,
        checkedColumnName: checkedColumns.length > 0 ? checkedColumns : ["*"],
        filterColumnName: column,
        pageSize: pageSize,
        pageNumber: newPage,
        startDate: startDateTable,
        endDate: endDateTable,
      }, { withCredentials: true });

      if (filesResponse.data === "You don't have access to this data") {
        setAccessGranted(false);
        setFile_Modal_Loader(false);
      } else if (filesResponse.data === "No Data Found" || filesResponse.data.totalCount === 0) {
        setNoData(true);
        setAccessGranted(false);
        setFile_Modal_Loader(false);
      } else {
        const pro = filesResponse.data.data;
        setPdata(pro);
        setNumRows(filesResponse.data.totalCount);
        setAccessGranted(true);
        setPage(newPage);
        setFile_Modal_Loader(false);
      }
    } catch (error) {
      if (error.response && (error.response.status === 404 || error.response.status === 500)) {
        setNoData(true);
        setAccessGranted(false);
        setNoDataError(true);
      }
      console.error("Error fetching filter data:", error);
      setFile_Modal_Loader(false);
    }
  };

  const handleChangeDropdown = (value, label) => {
    setSelectedItems('');
    setSelectedItems(label);
    setDropdownSelectedColumn(label.value);
  };

  const fetchMaxDate = async () => {
    try {
      const sortedDataResponse = await axios.get(`${apiBaseUrl}api/ReportModules/maxBusinessDate/${fileNameToSend}/${folderName}`, { withCredentials: true });
      setDateFromFile(sortedDataResponse.data.substring(0, 10));
      setStartDate(sortedDataResponse.data.substring(0, 10));
      setEndDate(sortedDataResponse.data.substring(0, 10));
    } catch (error) {
      console.error("Error fetching sorted data:", error);
    }
  };

  let filterOption = (input, option) => 
    (option?.label ?? '').toLowerCase().includes(input.toLowerCase());

  let filterOptions = (input, option) => 
    (option?.label ?? '').toLowerCase().includes(input.toLowerCase());

  const fetchColumns = async () => {
    try {
      const response = await fetch(`${apiBaseUrl}api/ReportModules/GetFieldNamesAccordingToUser?username=${userId}&filename=${fileNameToSend}&foldername=${folderName}`);
      const data = await response.json();
      setColumns(data);
      const convertedArray = data.map(item => ({ value: item, label: item }));
      setColumnOPTIONS(convertedArray);
      setCheckedColumns(data);
    } catch (error) {
      console.error('Error fetching column names:', error);
    }
  };

  const fetchContentInFiles = async (fileName, newPage) => {
  setFile_Modal_Loader(true);
  try {
    const getContentInFilesApiUrl = `${apiBaseUrl}api/ReportModules/getModalData`;
    const response = await axios.post(getContentInFilesApiUrl, {
      username: userId,
      filename: fileName,
      foldername: folderName,
      checkedColumnName: checkedColumns.length > 0 ? checkedColumns : ["*"],
      pagesize: pageSize,
      pagenumber: newPage,
    }, { withCredentials: true });

    if (response.data === "You don't have access to this data") {
      setAccessGranted(false);
    } else if (response.data === "No Data Found" || response.data.totalCount === 0) {
      setNoData(true);
      setAccessGranted(false);
    } else {
      const pro = response.data.data;
      setPdata(pro);
      setSearchPdata(pro);
      setNumRows(response.data.totalCount);
      setAccessGranted(true);
      setPage(newPage);
    }
  } catch (error) {
    if (error.response && (error.response.status === 404 || error.response.status === 500)) {
      setNoData(true);
      setAccessGranted(false);
      setNoDataError(true);
    }
    console.error("Error fetching files:", error);
  } finally {
    setFile_Modal_Loader(false);
  }
};


  const handleCheckboxChange = (event) => {
    const { value, checked } = event.target;
    console.log("Checkbox value:", value);
    if (value === 'selectAll') {
      if (checked) {
        setCheckedColumns(columns);
      } else {
        setCheckedColumns([]);
      }
    } else {
      if (checked) {
        setCheckedColumns(prevState => [...prevState, value]);
      } else {
        setCheckedColumns(prevState => prevState.filter(column => column !== value));
      }
    }
  };

  const filteredColumns = searchTerm ? columns.filter(column => column.toLowerCase().includes(searchTerm.toLowerCase())) : columns;

  const fetchByColumnName = async (e, newPage) => {
    setFile_Modal_Loader(true);
    if (valueSearchText.trim() !== '') {
      handleSearchText(newPage, selectedSearchColumn, valueSearchText);
    } else {
      try {
        const getContentInFilesApiUrl = `${apiBaseUrl}api/ReportModules/GetDataFromTableByColumnName`;
        const urlForApi = getContentInFilesApiUrl;
        const filesResponse = await axios.post(urlForApi, {
          username: userId,
          filename: e,
          foldername: folderName,
          checkedColumns: checkedColumns,
          pagesize: pageSize,
          pagenumber: newPage,
        }, { withCredentials: true });

        if (filesResponse.data === "You don't have access to this data") {
          setAccessGranted(false);
          setFile_Modal_Loader(false);
        } else if (filesResponse.data === "No Data Found" || filesResponse.data.totalCount === 0) {
          setNoData(true);
          setAccessGranted(false);
          setFile_Modal_Loader(false);
        } else {
          const pro = filesResponse.data.data;
          setPdata(pro);
          setSearchPdata(pro);
          setNumRows(filesResponse.data.totalCount);
          setAccessGranted(true);
          setPage(newPage);
          setFile_Modal_Loader(false);
        }
      } catch (error) {
        if (error.response && (error.response.status === 404 || error.response.status === 500)) {
          setNoData(true);
          setAccessGranted(false);
          setNoDataError(true);
        }
        console.error("Error fetching files by column:", error);
        setFile_Modal_Loader(false);
      }
    }
  };

    return (
  <>
    <Modal
      centered
      open={modalOpen}
      footer={null}
      title={null}
      // Responsive modal width using CSS classes
      className="responsive-modal"
      width="95%"
      style={{ maxWidth: '1200px' }}
      closeIcon={fullDataToDownloadLoader ? false : true}
      maskClosable={false}
      onCancel={() => { setModalOpen(false); }}
    >
      <ToastContainer />
      
      {/* Main modal content with responsive padding */}
      <div className="flex flex-col gap-4 p-2 sm:p-4 lg:p-6">
        
        {/* Header section with responsive layout */}
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 mb-4">
          
          {/* Control components - responsive grid */}
          <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-2 sm:gap-3 lg:gap-4">
            
            {/* File selector */}
            <div className="col-span-1 sm:col-span-2 lg:col-span-1">
              <FormControl sx={{ width: '100%', minWidth: 150 }} size="small">
                <InputLabel 
                  style={{ 
                    height: "32px", 
                    paddingRight: "10px", 
                    paddingBottom: "10px", 
                    fontSize: "12px" 
                  }}
                  className="text-xs"
                >
                  {fileNameToSend}
                </InputLabel>
                <AntSelect
                  label={fileNameToSend}
                  open={isOpen}
                  onOpen={handleToggle}
                  onClose={handleToggle}
                  MenuProps={{ 
                    PaperProps: { 
                      style: { 
                        width: 'auto',
                        minWidth: 200,
                        maxWidth: '90vw'
                      } 
                    } 
                  }}
                  style={{ height: 32 }}
                  className="w-full"
                >
                  <TextField
                    placeholder="Select Column Name"
                    fullWidth
                    InputProps={{ style: { height: 25 } }}
                    onClick={(e) => e.stopPropagation()}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    value={searchTerm}
                    className="w-full"
                  />
                  <MenuItem className="p-2" onClick={(e) => e.stopPropagation()}>
                    <div onClick={(e) => e.stopPropagation()} className="w-full">
                      <CheckboxComponent
                        columns={filteredColumns}
                        checkedColumns={checkedColumns}
                        handleCheckboxChange={handleCheckboxChange}
                        onClick={handleCheckboxClick}
                      />
                    </div>
                  </MenuItem>
                </AntSelect>
              </FormControl>
            </div>

            {/* Column selector */}
            <div className="col-span-1">
              <FormControl sx={{ width: '100%', minWidth: 120, height: 32 }} size="small">
                <Select
                  style={{
                    width: '100%',
                    minWidth: 120,
                    height: 32,
                    fontSize: "12px",
                    borderRadius: "0.4rem",
                    borderBottomRightRadius: "0rem",
                    borderTopRightRadius: "0rem",
                  }}
                  mode="single"
                  showSearch
                  placeholder="Select Column"
                  onChange={handleChangeDropdown}
                  filterOption={filterOption}
                  options={columnOPTIONS}
                  className="w-full text-xs"
                />
              </FormControl>
            </div>

            {/* Search input */}
            <div className="col-span-1">
              <FormControl sx={{ width: '100%', minWidth: 120, height: 32 }} size="small">
                <Input
                  style={{
                    width: '100%',
                    height: 32,
                    borderRadius: "0.4rem"
                  }}
                  placeholder="Search text"
                  onChange={handleAllTextSearch}
                  className="w-full text-xs"
                />
              </FormControl>
            </div>

            {/* Date picker */}
            <div className="col-span-1">
              <FormControl sx={{ width: '100%', minWidth: 120, height: 32 }} size="small">
                <RangePicker
                  className="bg-transparent w-full h-8 text-xs"
                  onChange={handleDateChange}
                  disabledDate={(current) => disableDate(current)}
                  style={{ width: '100%' }}
                />
              </FormControl>
            </div>
          </div>

          {/* Date and count info - responsive positioning */}
          <div className="flex flex-col sm:flex-row sm:items-center gap-2 text-sm text-gray-600 mt-2 lg:mt-0">
            <p className="m-0 whitespace-nowrap">Refresh on: {dateFromFile}</p>
            <p className="m-0 whitespace-nowrap">Count: {numRows}</p>
          </div>
        </div>

        {/* Loader or table content */}
        {file_Modal_Loader ? (
          <div className="flex flex-col items-center justify-center py-8 sm:py-12 lg:py-16">
            <ThreeDots 
              height="150" 
              width="120" 
              radius="9" 
              color="#4fa94d" 
              ariaLabel="three-dots-loading" 
              visible={true} 
            />
            <p className="mt-4 text-sm sm:text-base text-center">Please Wait, Data is loading...</p>
          </div>
        ) : (
          <div className="overflow-hidden">
            <div className="max-h-64 sm:max-h-80 lg:max-h-96 xl:max-h-[46vh] overflow-auto">
              {accessGranted ? (
                <TableFile 
                  data={pdata} 
                  searchTextValue={valueSearchText} 
                  SearchTextData={handleSearchText} 
                  searchColumn={selectedSearchColumn} 
                  endDateTable={endDateTable} 
                />
              ) : (
                <div className="flex items-center justify-center py-8 sm:py-12">
                  {noData ? (
                    <p className="text-lg sm:text-xl lg:text-2xl font-bold text-gray-600 text-center">
                      {noDataError ? 'NO Data Found...' : 'Hmm...something seems to have gone wrong.'}
                    </p>
                  ) : (
                    <p className="text-lg sm:text-xl lg:text-2xl font-bold text-gray-600 text-center">
                      You don't have access to this data.
                    </p>
                  )}
                </div>
              )}
            </div>
          </div>
        )}

        {/* Pagination and download section */}
        <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4 pt-4 sm:pt-6 lg:pt-8 border-t border-gray-200">
          
          {/* Pagination */}
          {numRows > 0 && (
            <div className="flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-4">
              <div className="text-sm text-gray-600">
                Rows per Page: {pageSize}
              </div>
              <Stack spacing={1}>
                <Pagination 
                  count={Math.ceil(numRows / pageSize)} 
                  page={page} 
                  onChange={handleChange}
                  size="small"
                  className="flex justify-center sm:justify-start"
                />
              </Stack>
            </div>
          )}

          {/* Download button section */}
          {sessionStorage.getItem('userDownload') === '1' && (
            <div className="flex justify-center lg:justify-end">
              {fullDataToDownloadLoader ? (
                <div className="flex items-center gap-2 sm:gap-3 p-2 bg-gray-50 rounded-lg w-full sm:w-auto">
                  <p className="text-sm">Downloading...</p>
                  <Box sx={{ 
                    width: { xs: '150px', sm: '200px' }, 
                    height: "20px", 
                    position: "relative" 
                  }}>
                    <LinearProgress />
                  </Box>
                  <button 
                    onClick={cancelDownload}
                    className="p-1 hover:bg-gray-200 rounded transition-colors"
                  >
                    <IoMdClose fill="red" size={15} />
                  </button>
                </div>
              ) : (
                <div className="w-full sm:w-auto">
                  <Button
                    id="download-button"
                    aria-controls={anchorEl ? 'download-menu' : undefined}
                    aria-haspopup="true"
                    aria-expanded={anchorEl ? 'true' : undefined}
                    onClick={handleClick}
                    variant="contained"
                    endIcon={<ArrowDropDownIcon />}
                    style={{ 
                      color: 'black', 
                      backgroundColor: '#e5e5ea',
                      width: '100%',
                      minWidth: '120px'
                    }}
                    className="w-full sm:w-auto"
                  >
                    Download
                  </Button>
                  
                  {/* Download menus remain the same but with responsive considerations */}
                  <Menu
                    id="download-menu"
                    anchorEl={anchorEl}
                    open={Boolean(anchorEl)}
                    onClose={handleClose}
                    MenuListProps={{
                      'aria-labelledby': 'download-button',
                    }}
                    PaperProps={{
                      style: {
                        maxWidth: '90vw'
                      }
                    }}
                  >
                    <MenuItem onClick={(event) => handleSubMenuClick(event, 'currentPage')}>
                      Current Page Download
                    </MenuItem>
                    <Menu
                      id="current-page-menu"
                      anchorEl={subMenuAnchorEl}
                      open={currentSubMenu === 'currentPage' && Boolean(subMenuAnchorEl)}
                      onClose={handleClose}
                      MenuListProps={{
                        'aria-labelledby': 'current-page-menu',
                      }}
                    >
                      <MenuItem onClick={(event) => { event.preventDefault(); handleFileDownload('Ccsv'); }}>CSV</MenuItem>
                      <MenuItem onClick={(event) => { event.preventDefault(); handleFileDownload('Cxlsx'); }}>XLSX</MenuItem>
                      <MenuItem onClick={handleSubMenuClick2}>TEXT</MenuItem>
                      <Menu
                        id="text-menu"
                        anchorEl={subMenuAnchorEl2}
                        open={Boolean(subMenuAnchorEl2)}
                        onClose={handleClose}
                        MenuListProps={{
                          'aria-labelledby': 'text-menu',
                        }}
                      >
                        <MenuItem onClick={(event) => { event.preventDefault(); handleFileDownload('Chtxt'); }}>With Header</MenuItem>
                        <MenuItem onClick={(event) => { event.preventDefault(); handleFileDownload('Ctxt'); }}>Without Header</MenuItem>
                      </Menu>
                    </Menu>
                    <MenuItem onClick={(event) => handleSubMenuClick(event, 'fullFile')}>
                      {searchTextForFilter !== '' ? 'Filter Full Data Download' : 'Full File Download'}
                    </MenuItem>
                    <Menu
                      id="full-file-menu"
                      anchorEl={subMenuAnchorEl}
                      open={currentSubMenu === 'fullFile' && Boolean(subMenuAnchorEl)}
                      onClose={handleClose}
                      MenuListProps={{
                        'aria-labelledby': 'full-file-menu',
                      }}
                    >
                      <MenuItem onClick={(event) => { event.preventDefault(); handleFileDownload('Fcsv'); }}>CSV</MenuItem>
                      <MenuItem onClick={(event) => { event.preventDefault(); handleFileDownload('Fxlsx'); }}>XLSX</MenuItem>
                      <MenuItem onClick={handleSubMenuClick2}>TEXT</MenuItem>
                      <Menu
                        id="text-menu"
                        anchorEl={subMenuAnchorEl2}
                        open={Boolean(subMenuAnchorEl2)}
                        onClose={handleClose}
                        MenuListProps={{
                          'aria-labelledby': 'text-menu',
                        }}
                      >
                        <MenuItem onClick={(event) => { event.preventDefault(); handleFileDownload('Ftxt'); }}>with Header</MenuItem>
                        <MenuItem onClick={(event) => { event.preventDefault(); handleFileDownload('Fhtxt'); }}>without Header</MenuItem>
                      </Menu>
                    </Menu>
                  </Menu>
                </div>
              )}
            </div>
          )}
        </div>

        {/* Consent form modal */}
        <Modal
          centered
          open={showConsentForm}
          footer={null}
          title={null}
          width="auto"
          style={{ maxWidth: '90vw' }}
          closeIcon={!fullDataToDownloadLoader}
          maskClosable={false}
          onCancel={handleConsentFormClose}
        >
          <div className="p-4 sm:p-6 max-w-lg mx-auto">
            <h3 className="text-lg sm:text-xl font-semibold mb-4">Terms and Conditions</h3>
            <div className="text-red-600 text-sm sm:text-base mb-4 space-y-1">
              <p>1. It is the responsibility of the concerned Business Users to validate the downloaded data.</p>
              <p>2. The data located in the specified folder is restricted exclusively to the team members associated with given permission.</p>
              <p>3. Any data downloaded from the specified folder will result in a transfer of ownership to the downloading team.</p>
              <p>4. Users need to make sure to download within given timelines.</p>
              <p>5. Any SR raised for data sets, service timeline is 7 working days.</p>
            </div>
            
            <div className="flex items-center gap-2 mb-4">
              <Input 
                type='checkbox' 
                id='agree' 
                checked={isChecked} 
                onChange={handleConsentBoxChange}
                className="w-4 h-4"
              />
              <label htmlFor='agree' className="text-sm sm:text-base">I Agree</label>
            </div>

            {isChecked && fileDownloadRequest && fileDownloadRequest.startsWith("F") && (
              <div className="mb-4">
                <div className="text-sm sm:text-base font-medium mb-2">Rows Per Sheet:</div>
                <Row gutter={[8, 8]}>
                  <Col xs={24} sm={16}>
                    <Slider 
                      min={1} 
                      max={numRows} 
                      onChange={onChange} 
                      value={typeof inputValue === 'number' ? inputValue : 0}
                      className="w-full"
                    />
                  </Col>
                  <Col xs={24} sm={8}>
                    <InputNumber 
                      min={1} 
                      max={numRows} 
                      value={inputValue} 
                      onChange={onChange}
                      className="w-full"
                    />
                  </Col>
                </Row>
              </div>
            )}

            <div className="flex flex-col sm:flex-row gap-2 sm:gap-4">
              <Button 
                variant="outlined" 
                onClick={handleConsentFormSubmit} 
                disabled={!isChecked || isSubmitting}
                className="w-full sm:w-auto min-w-[75px]"
              >
                {isSubmitting ? "Submitting..." : "OK"}
              </Button>
              <Button 
                variant="outlined" 
                onClick={handleConsentFormClose} 
                disabled={isSubmitting}
                className="w-full sm:w-auto min-w-[75px]"
              >
                Close
              </Button>
            </div>
          </div>
        </Modal>
      </div>
    </Modal>
  </>
);
}
export default ClaudeResponsiveModal;

// import { Modal, Input, Select, Button, Menu, Checkbox } from 'antd';
// import React, { useCallback, useContext, useEffect, useState } from 'react';
// import { ToastContainer } from 'react-toastify';
// import { Stack, Pagination, Box, LinearProgress } from '@mui/material';
// import { IoMdClose } from 'react-icons/io';
// import ArrowDropDownIcon from '@mui/icons-material/ArrowDropDown';
// import './ResponsiveModal.css';
// // import StateContext from '../../../context/StateContext';



// const ResponsiveModal = (props) => {
//     // const { modalOpen, setModalOpen } = props; make uncomment after
//     const [modalOpen, setModalOpen] = useState(true);
//     const [fullDataToDownloadLoader, setFullDataToDownloadLoader] = useState(false);
//       // const { fileNameToSend, apiBaseUrl, setLogoutTimers, folderName, userSubResult, checkedColumns, setCheckedColumns } = useContext(StateContext);
//         const { fileNameToSend, apiBaseUrl, setLogoutTimers, folderName, userSubResult, checkedColumns, setCheckedColumns } = useContext(true);



//   return (
//    <>
//       <Modal
//        centered  // centers the modal on the screen
//         open={modalOpen}
//         footer={null}  //removes footer button
//         title={null}   //removes title header
//         width={"90vw"} //Sets modal width
//         closeIcon={fullDataToDownloadLoader ? false : true}
//         maskClosable={false} //User cannot close modal by clicking outside
//         onCancel={() => { setModalOpen(false); }}
//       >
//       <ToastContainer />  
//       {/* Placeholder to show toasts (notifications) if triggered from anywhere */}
//     {/* <div className="flex flex-col justify-center items-center min-h-[40vh] p-4 w-full max-w-[1200px] mx-auto"> */}
//     {/* <div className="flex flex-col justify-center items-center h-full p-4 w-full max-w-[1200px] mx-auto">
//      */}
//      <div className="flex flex-col justify-center items-center gap-[1vh] p-4 w-full max-w-[1200px] mx-auto">  {/*modalContent*/}
//               {/* <div className="modalContent"> */}
//               <div className="text-[#365566] font-[Arial] text-base font-semibold ml-3">
//                             {/* <div className="header-section"> */}
//                               <div className="w-full flex flex-col md:flex-row justify-between items-start md:items-center gap-4 mb-4">
//                                               {/* <div className="modalViewComponent"> */}
//                                               <div className="flex items-center justify-center gap-3 mr-3 flex-wrap">
//                                                                 {/* <FormControl sx={{ minWidth: 200 }} size="small"> */}
//                                                 <div className="min-w-[200px] text-sm">
//                     {/* <InputLabel style={{ height: "32px", paddingRight: "10px", paddingBottom: "10px", fontSize: "12px" }}> */}
//       <label className="h-8 pr-[10px] pb-[10px] text-[12px]">
//   {fileNameToSend}
// </label>

//   <h2 className="text-lg font-semibold text-center">Responsive Modal Layout2</h2>
//   </div>
//   </div>
//   </div>
//   </div>
// </div>


//       </Modal>
//     </>
//   );
// };

// export default ResponsiveModal;


import { Col, InputNumber, Modal, Row, Slider, Select, Input, DatePicker } from 'antd';
import React, { useCallback, useContext, useEffect, useState } from 'react';
import './ClaudeResponsive.css';
import axios from 'axios';
import Table from './Table';
import Pagination from '@mui/material/Pagination';
import Stack from '@mui/material/Stack';
import * as XLSX from 'xlsx';
import Papa from 'papaparse';
import StateContext from './Statecontext';
import Dropdown from 'rsuite/Dropdown';
import 'rsuite/dist/rsuite.min.css';
import { ThreeDots } from 'react-loader-spinner';
import Box from '@mui/material/Box';
import LinearProgress from '@mui/material/LinearProgress';
import { ToastContainer, toast } from 'react-toastify';
import { IoMdClose } from 'react-icons/io';
import { Select as AntSelect, FormControl, InputLabel, Menu, MenuItem, Button } from '@mui/material';
import CheckboxComponent from './CheckboxComponent';
import { isAfter, startOfDay, subDays } from 'date-fns';
import TextField from '@mui/material/TextField';
import { ArrowDropDownIcon } from '@mui/x-date-pickers';
import moment from 'moment';

const { RangePicker } = DatePicker;

const ClaudeResponsiveModal = (props) => {
  const { modalOpen, setModalOpen } = props;
  const { fileNameToSend, apiBaseUrl, setLogoutTimers, folderName, userSubResult, checkedColumns, setCheckedColumns } = useContext(StateContext);
  
  // All your existing state variables here...
  const [pdata, setPdata] = useState([{}]);
  const [searchPdata, setSearchPdata] = useState([{}]);
  const [checkedColumnOption, setCheckedColumnOption] = useState([]);
  const [fullDataToDownloadLoader, setFullDataToDownloadLoader] = useState(false);
  const [page, setPage] = useState(1);
  const [pageFilter, setPageFilter] = useState(1);
  const [numRows, setNumRows] = useState(1);
  const [accessGranted, setAccessGranted] = useState(true);
  const [file_Modal_Loader, setFile_Modal_Loader] = useState(false);
  const [sortColumn, setSortColumn] = useState('');
  const [sortOrder, setSortOrder] = useState('');
  const [noData, setNoData] = useState(false);
  const [noDataError, setNoDataError] = useState(false);
  const [dateFromFile, setDateFromFile] = useState(null);
  const [maxRowsPerSheet, setMaxRowsPerSheet] = useState(700000);
  const userId = sessionStorage.getItem('userId');
  const [cancelTokenSource, setCancelTokenSource] = useState(null);
  const [startDateTable, setStartDate] = useState(null);
  const [endDateTable, setEndDate] = useState(null);
  const [selectedItems, setSelectedItems] = useState();
  const [pageWithDate, setPageWithDate] = useState(false);
  const [OPTIONS, setOPTIONS] = useState([]);
  const [columnOPTIONS, setColumnOPTIONS] = useState([]);
  const [searchTextForFilter, setSearchTextForFilter] = useState('');
  const [dropdownSelectedColumn, setDropdownSelectedColumn] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [showConsentForm, setShowConsentForm] = useState(false);
  const [isChecked, setIsChecked] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [fileDownloadRequest, setFileDownloadRequest] = useState(null);
  const [downloadFileName, setDownloadFileName] = useState();
  const [columns, setColumns] = useState([]);
  const [dropdownSelectedColumnsFormCheckBox, setDropdownSelectedColumnsFormCheckBox] = useState([]);
  const [isOpen, setIsOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  const [subMenuAnchorEl, setSubMenuAnchorEl] = useState(null);
  const [subMenuAnchorEl2, setSubMenuAnchorEl2] = useState(null);
  const [currentSubMenu, setCurrentSubMenu] = useState('');
  const [inputValue, setInputValue] = useState(700000);
  const [valueSearchText, setValueSearchText] = useState('');
  const [selectedSearchColumn, setSelectedSearchColumn] = useState('');

  const userRole = sessionStorage.getItem("userRole") || "";
  const token = sessionStorage.getItem("token");
  const pageSize = 100;

  // All your existing functions here (keeping them unchanged for brevity)...
  // [Include all the existing functions like onChange, handleClick, etc.]

  // Responsive breakpoint hook
  const [windowSize, setWindowSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight,
  });

  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // Responsive calculations
  const isXs = windowSize.width < 576;
  const isSm = windowSize.width >= 576 && windowSize.width < 768;
  const isMd = windowSize.width >= 768 && windowSize.width < 992;
  const isLg = windowSize.width >= 992 && windowSize.width < 1200;
  const isXl = windowSize.width >= 1200 && windowSize.width < 1400;
  const isXxl = windowSize.width >= 1400;

  // Dynamic modal width based on screen size
  const getModalWidth = () => {
    if (isXs) return '95%';
    if (isSm) return '90%';
    if (isMd) return '85%';
    if (isLg) return '80%';
    if (isXl) return '75%';
    return '70%';
  };

  // Dynamic grid columns for controls
  const getControlsGridCols = () => {
    if (isXs) return 1;
    if (isSm) return 2;
    if (isMd) return 3;
    return 4;
  };

  // Dynamic table height
  const getTableHeight = () => {
    const baseHeight = windowSize.height * 0.4; // 40% of viewport height
    if (isXs) return Math.min(baseHeight, 300);
    if (isSm) return Math.min(baseHeight, 400);
    if (isMd) return Math.min(baseHeight, 500);
    return Math.min(baseHeight, 600);
  };

  return (
    <>
      <Modal
        centered
        open={modalOpen}
        footer={null}
        title={null}
        width={getModalWidth()}
        style={{ 
          maxWidth: isXs ? '100vw' : '95vw',
          margin: isXs ? 0 : 'auto'
        }}
        closeIcon={fullDataToDownloadLoader ? false : true}
        maskClosable={false}
        onCancel={() => { setModalOpen(false); }}
        bodyStyle={{
          padding: isXs ? '12px' : isSm ? '16px' : '24px',
          maxHeight: '90vh',
          overflow: 'auto'
        }}
      >
        <ToastContainer />
        
        {/* Main modal content with fully responsive design */}
        <div style={{ 
          display: 'flex', 
          flexDirection: 'column', 
          gap: isXs ? '12px' : isSm ? '16px' : '20px' 
        }}>
          
          {/* Header section with adaptive layout */}
          <div style={{
            display: 'flex',
            flexDirection: isLg ? 'row' : 'column',
            alignItems: isLg ? 'center' : 'stretch',
            justifyContent: isLg ? 'space-between' : 'flex-start',
            gap: isXs ? '12px' : '16px',
            marginBottom: isXs ? '8px' : '16px'
          }}>
            
            {/* Control components - fully responsive grid */}
            <div style={{
              display: 'grid',
              gridTemplateColumns: `repeat(${getControlsGridCols()}, 1fr)`,
              gap: isXs ? '8px' : isSm ? '12px' : '16px',
              width: '100%',
              maxWidth: isLg ? '70%' : '100%'
            }}>
              
              {/* File selector - spans full width on mobile */}
              <div style={{ 
                gridColumn: isXs ? 'span 1' : isSm ? 'span 2' : isLg ? 'span 1' : 'span 1',
                minWidth: 0 // Prevents overflow
              }}>
                <FormControl 
                  sx={{ 
                    width: '100%', 
                    minWidth: 120,
                    '& .MuiInputLabel-root': {
                      fontSize: isXs ? '12px' : '14px'
                    }
                  }} 
                  size="small"
                >
                  <InputLabel 
                    style={{ 
                      height: "32px", 
                      paddingRight: "10px", 
                      paddingBottom: "10px", 
                      fontSize: isXs ? "10px" : "12px",
                      whiteSpace: 'nowrap',
                      overflow: 'hidden',
                      textOverflow: 'ellipsis'
                    }}
                  >
                    {fileNameToSend}
                  </InputLabel>
                  <AntSelect
                    label={fileNameToSend}
                    open={isOpen}
                    onOpen={() => setIsOpen(true)}
                    onClose={() => setIsOpen(false)}
                    MenuProps={{ 
                      PaperProps: { 
                        style: { 
                          width: 'auto',
                          minWidth: isXs ? 250 : 300,
                          maxWidth: '95vw',
                          maxHeight: '60vh'
                        } 
                      } 
                    }}
                    style={{ height: 32, width: '100%' }}
                  >
                    <TextField
                      placeholder="Select Column Name"
                      fullWidth
                      InputProps={{ 
                        style: { 
                          height: 25,
                          fontSize: isXs ? '12px' : '14px'
                        } 
                      }}
                      onClick={(e) => e.stopPropagation()}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      value={searchTerm}
                    />
                    <MenuItem onClick={(e) => e.stopPropagation()}>
                      <div onClick={(e) => e.stopPropagation()} style={{ width: '100%' }}>
                        <CheckboxComponent
                          columns={columns.filter(column => 
                            column.toLowerCase().includes(searchTerm.toLowerCase())
                          )}
                          checkedColumns={checkedColumns}
                          handleCheckboxChange={(event) => {
                            const { value, checked } = event.target;
                            if (value === 'selectAll') {
                              if (checked) {
                                setCheckedColumns(columns);
                              } else {
                                setCheckedColumns([]);
                              }
                            } else {
                              if (checked) {
                                setCheckedColumns(prevState => [...prevState, value]);
                              } else {
                                setCheckedColumns(prevState => prevState.filter(column => column !== value));
                              }
                            }
                          }}
                        />
                      </div>
                    </MenuItem>
                  </AntSelect>
                </FormControl>
              </div>

              {/* Column selector */}
              <div style={{ minWidth: 0 }}>
                <Select
                  style={{
                    width: '100%',
                    minWidth: isXs ? 100 : 120,
                    height: 32,
                    fontSize: isXs ? "10px" : "12px",
                    borderRadius: "0.4rem",
                  }}
                  mode="single"
                  showSearch
                  placeholder={isXs ? "Column" : "Select Column"}
                  onChange={(value, label) => {
                    setSelectedItems(label);
                    setDropdownSelectedColumn(label.value);
                  }}
                  filterOption={(input, option) => 
                    (option?.label ?? '').toLowerCase().includes(input.toLowerCase())
                  }
                  options={columnOPTIONS}
                />
              </div>

              {/* Search input */}
              <div style={{ minWidth: 0 }}>
                <Input
                  style={{
                    width: '100%',
                    height: 32,
                    borderRadius: "0.4rem",
                    fontSize: isXs ? "10px" : "12px"
                  }}
                  placeholder={isXs ? "Search" : "Search text"}
                  onChange={(e) => {
                    const searchValueText = e.target.value;
                    setSearchTextForFilter(searchValueText);
                    // Add your debounced search logic here
                  }}
                />
              </div>

              {/* Date picker */}
              <div style={{ minWidth: 0 }}>
                <RangePicker
                  style={{ 
                    width: '100%',
                    height: 32,
                    fontSize: isXs ? "10px" : "12px"
                  }}
                  onChange={(dates) => {
                    // Add your date change logic here
                  }}
                  disabledDate={(current) => {
                    // Add your disable date logic here
                    return false;
                  }}
                  size={isXs ? "small" : "middle"}
                />
              </div>
            </div>

            {/* Date and count info - responsive positioning */}
            <div style={{
              display: 'flex',
              flexDirection: isXs ? 'column' : 'row',
              alignItems: isXs ? 'stretch' : 'center',
              gap: isXs ? '4px' : '12px',
              fontSize: isXs ? '12px' : '14px',
              color: '#666',
              flexShrink: 0,
              textAlign: isXs ? 'center' : 'left'
            }}>
              <p style={{ margin: 0, whiteSpace: 'nowrap' }}>
                Refresh on: {dateFromFile}
              </p>
              <p style={{ margin: 0, whiteSpace: 'nowrap' }}>
                Count: {numRows.toLocaleString()}
              </p>
            </div>
          </div>

          {/* Loader or table content with dynamic height */}
          {file_Modal_Loader ? (
            <div style={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              justifyContent: 'center',
              padding: isXs ? '32px 16px' : '48px 24px',
              height: getTableHeight()
            }}>
              <ThreeDots 
                height={isXs ? "80" : "120"} 
                width={isXs ? "60" : "100"} 
                radius="9" 
                color="#4fa94d" 
                ariaLabel="three-dots-loading" 
                visible={true} 
              />
              <p style={{ 
                marginTop: '16px', 
                fontSize: isXs ? '12px' : '14px',
                textAlign: 'center' 
              }}>
                Please Wait, Data is loading...
              </p>
            </div>
          ) : (
            <div style={{ 
              overflow: 'hidden',
              border: '1px solid #e0e0e0',
              borderRadius: '8px'
            }}>
              <div style={{ 
                height: getTableHeight(),
                overflow: 'auto'
              }}>
                {accessGranted ? (
                  <Table 
                    data={pdata} 
                    searchTextValue={valueSearchText} 
                    SearchTextData={(page, column, searchText) => {
                      // Add your search logic here
                    }} 
                    searchColumn={selectedSearchColumn} 
                    endDateTable={endDateTable}
                    responsive={true}
                    size={isXs ? 'small' : 'middle'}
                  />
                ) : (
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    height: '100%',
                    padding: '24px'
                  }}>
                    <p style={{
                      fontSize: isXs ? '16px' : isSm ? '18px' : '20px',
                      fontWeight: 'bold',
                      color: '#666',
                      textAlign: 'center',
                      margin: 0
                    }}>
                      {noData ? 
                        (noDataError ? 'NO Data Found...' : 'Hmm...something seems to have gone wrong.') : 
                        "You don't have access to this data."
                      }
                    </p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Pagination and download section - fully responsive */}
          <div style={{
            display: 'flex',
            flexDirection: isLg ? 'row' : 'column',
            alignItems: isLg ? 'center' : 'stretch',
            justifyContent: isLg ? 'space-between' : 'flex-start',
            gap: isXs ? '12px' : '16px',
            paddingTop: '16px',
            borderTop: '1px solid #e0e0e0'
          }}>
            
            {/* Pagination with responsive sizing */}
            {numRows > 0 && (
              <div style={{
                display: 'flex',
                flexDirection: isXs ? 'column' : 'row',
                alignItems: isXs ? 'center' : 'center',
                gap: isXs ? '8px' : '16px',
                flexWrap: 'wrap'
              }}>
                <div style={{ 
                  fontSize: isXs ? '12px' : '14px',
                  color: '#666',
                  textAlign: 'center'
                }}>
                  Rows per Page: {pageSize}
                </div>
                <Stack spacing={1}>
                  <Pagination 
                    count={Math.ceil(numRows / pageSize)} 
                    page={page} 
                    onChange={(event, value) => {
                      // Add your pagination logic here
                    }}
                    size={isXs ? "small" : "medium"}
                    siblingCount={isXs ? 0 : 1}
                    boundaryCount={isXs ? 1 : 2}
                  />
                </Stack>
              </div>
            )}

            {/* Download button section with responsive sizing */}
            {sessionStorage.getItem('userDownload') === '1' && (
              <div style={{
                display: 'flex',
                justifyContent: isLg ? 'flex-end' : 'center',
                width: isLg ? 'auto' : '100%'
              }}>
                {fullDataToDownloadLoader ? (
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: isXs ? '8px' : '12px',
                    padding: '8px 12px',
                    backgroundColor: '#f5f5f5',
                    borderRadius: '8px',
                    width: isXs ? '100%' : 'auto',
                    justifyContent: 'space-between'
                  }}>
                    <p style={{ 
                      fontSize: isXs ? '12px' : '14px',
                      margin: 0,
                      color: '#666'
                    }}>
                      Downloading...
                    </p>
                    <Box sx={{ 
                      width: isXs ? '120px' : '200px',
                      height: "20px"
                    }}>
                      <LinearProgress />
                    </Box>
                    <button 
                      onClick={() => {
                        if (cancelTokenSource) {
                          cancelTokenSource.cancel('Download canceled');
                          sessionStorage.setItem("process", false);
                          setCancelTokenSource(null);
                          setFullDataToDownloadLoader(false);
                        }
                      }}
                      style={{
                        padding: '4px',
                        border: 'none',
                        background: 'transparent',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                      onMouseEnter={(e) => e.target.style.backgroundColor = '#e0e0e0'}
                      onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                    >
                      <IoMdClose fill="red" size={isXs ? 12 : 15} />
                    </button>
                  </div>
                ) : (
                  <Button
                    id="download-button"
                    aria-controls={anchorEl ? 'download-menu' : undefined}
                    aria-haspopup="true"
                    aria-expanded={anchorEl ? 'true' : undefined}
                    onClick={handleClick}
                    variant="contained"
                    endIcon={<ArrowDropDownIcon />}
                    style={{ 
                      color: 'black', 
                      backgroundColor: '#e5e5ea',
                      width: isXs ? '100%' : 'auto',
                      minWidth: isXs ? '100%' : '140px',
                      height: '40px',
                      fontSize: isXs ? '12px' : '14px'
                    }}
                  >
                    Download
                  </Button>
                )}
                
                {/* Download menus with responsive positioning */}
                <Menu
                  id="download-menu"
                  anchorEl={anchorEl}
                  open={Boolean(anchorEl)}
                  onClose={handleClose}
                  MenuListProps={{
                    'aria-labelledby': 'download-button',
                  }}
                  PaperProps={{
                    style: {
                      maxWidth: '90vw',
                      fontSize: isXs ? '12px' : '14px'
                    }
                  }}
                >
                  <MenuItem onClick={(event) => handleSubMenuClick(event, 'currentPage')}>
                    Current Page Download
                  </MenuItem>
                  <MenuItem onClick={(event) => handleSubMenuClick(event, 'fullFile')}>
                    {searchTextForFilter !== '' ? 'Filter Full Data Download' : 'Full File Download'}
                  </MenuItem>
                </Menu>
              </div>
            )}
          </div>

          {/* Consent form modal with responsive sizing */}
          <Modal
            centered
            open={showConsentForm}
            footer={null}
            title={null}
            width={isXs ? '95%' : isSm ? '85%' : '600px'}
            style={{ 
              maxWidth: '95vw',
              maxHeight: '90vh' 
            }}
            closeIcon={!fullDataToDownloadLoader}
            maskClosable={false}
            onCancel={() => {
              setShowConsentForm(false);
              setFileDownloadRequest(null);
              setIsChecked(false);
            }}
            bodyStyle={{
              padding: isXs ? '16px' : '24px',
              maxHeight: '80vh',
              overflow: 'auto'
            }}
          >
            <div style={{ maxWidth: '100%' }}>
              <h3 style={{ 
                fontSize: isXs ? '16px' : '18px',
                fontWeight: '600',
                marginBottom: isXs ? '12px' : '16px',
                textAlign: 'center'
              }}>
                Terms and Conditions
              </h3>
              
              <div style={{
                color: '#dc3545',
                fontSize: isXs ? '12px' : '14px',
                marginBottom: isXs ? '12px' : '16px',
                lineHeight: '1.5'
              }}>
                <p style={{ marginBottom: '8px' }}>
                  1. It is the responsibility of the concerned Business Users to validate the downloaded data.
                </p>
                <p style={{ marginBottom: '8px' }}>
                  2. The data located in the specified folder is restricted exclusively to the team members associated with given permission.
                </p>
                <p style={{ marginBottom: '8px' }}>
                  3. Any data downloaded from the specified folder will result in a transfer of ownership to the downloading team.
                </p>
                <p style={{ marginBottom: '8px' }}>
                  4. Users need to make sure to download within given timelines.
                </p>
                <p style={{ marginBottom: '8px' }}>
                  5. Any SR raised for data sets, service timeline is 7 working days.
                </p>
              </div>
              
              <div style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                marginBottom: isXs ? '12px' : '16px'
              }}>
                <input 
                  type='checkbox' 
                  id='agree' 
                  checked={isChecked} 
                  onChange={(e) => setIsChecked(e.target.checked)}
                  style={{ width: '16px', height: '16px' }}
                />
                <label 
                  htmlFor='agree' 
                  style={{ 
                    fontSize: isXs ? '12px' : '14px',
                    cursor: 'pointer'
                  }}
                >
                  I Agree
                </label>
              </div>

              {/* Rows per sheet slider - only show for full file downloads */}
              {isChecked && fileDownloadRequest && fileDownloadRequest.startsWith("F") && (
                <div style={{ marginBottom: isXs ? '12px' : '16px' }}>
                  <div style={{ 
                    fontSize: isXs ? '12px' : '14px',
                    fontWeight: '500',
                    marginBottom: '8px'
                  }}>
                    Rows Per Sheet:
                  </div>
                  <Row gutter={[8, 8]}>
                    <Col xs={24} sm={16}>
                      <Slider 
                        min={1} 
                        max={numRows} 
                        onChange={(value) => {
                          if (value < 0) {
                            setInputValue(1);
                          } else {
                            setInputValue(value);
                          }
                        }} 
                        value={typeof inputValue === 'number' ? inputValue : 0}
                      />
                    </Col>
                    <Col xs={24} sm={8}>
                      <InputNumber 
                        min={1} 
                        max={numRows} 
                        value={inputValue} 
                        onChange={(value) => {
                          if (value < 0) {
                            setInputValue(1);
                          } else {
                            setInputValue(value);
                          }
                        }}
                        style={{ width: '100%' }}
                      />
                    </Col>
                  </Row>
                </div>
              )}

              <div style={{
                display: 'flex',
                flexDirection: isXs ? 'column' : 'row',
                gap: isXs ? '8px' : '12px',
                justifyContent: 'center'
              }}>
                <Button 
                  variant="outlined" 
                  onClick={async () => {
                    if (fileDownloadRequest) {
                      // Add your consent update and file download logic here
                      setShowConsentForm(false);
                      setFileDownloadRequest(null);
                      setIsChecked(false);
                    }
                  }} 
                  disabled={!isChecked || isSubmitting}
                  style={{
                    width: isXs ? '100%' : 'auto',
                    minWidth: isXs ? '100%' : '80px',
                    fontSize: isXs ? '12px' : '14px'
                  }}
                >
                  {isSubmitting ? "Submitting..." : "OK"}
                </Button>
                <Button 
                  variant="outlined" 
                  onClick={() => {
                    setShowConsentForm(false);
                    setFileDownloadRequest(null);
                    setIsChecked(false);
                  }} 
                  disabled={isSubmitting}
                  style={{
                    width: isXs ? '100%' : 'auto',
                    minWidth: isXs ? '100%' : '80px',
                    fontSize: isXs ? '12px' : '14px'
                  }}
                >
                  Close
                </Button>
              </div>
            </div>
          </Modal>
        </div>
      </Modal>
    </>
  );
};

export default ClaudeResponsiveModal;

import { Col, InputNumber, Modal, Row, Slider, Select, Input, DatePicker } from 'antd';
import React, { useCallback, useContext, useEffect, useState } from 'react';
import './ClaudeResponsive.css';
import axios from 'axios';
import Table from './Table';
import Pagination from '@mui/material/Pagination';
import Stack from '@mui/material/Stack';
import * as XLSX from 'xlsx';
import Papa from 'papaparse';
import StateContext from './Statecontext';
import Dropdown from 'rsuite/Dropdown';
import 'rsuite/dist/rsuite.min.css';
import { ThreeDots } from 'react-loader-spinner';
import Box from '@mui/material/Box';
import LinearProgress from '@mui/material/LinearProgress';
import { ToastContainer, toast } from 'react-toastify';
import { IoMdClose } from 'react-icons/io';
import { Select as AntSelect, FormControl, InputLabel, Menu, MenuItem, Button } from '@mui/material';
import CheckboxComponent from './CheckboxComponent';
import { isAfter, startOfDay, subDays } from 'date-fns';
import TextField from '@mui/material/TextField';
import { ArrowDropDownIcon } from '@mui/x-date-pickers';
import moment from 'moment';

const { RangePicker } = DatePicker;

const ClaudeResponsiveModal = (props) => {
  const { modalOpen, setModalOpen } = props;
  const { fileNameToSend, apiBaseUrl, setLogoutTimers, folderName, userSubResult, checkedColumns, setCheckedColumns } = useContext(StateContext);
  
  // All your existing state variables here...
  const [pdata, setPdata] = useState([{}]);
  const [searchPdata, setSearchPdata] = useState([{}]);
  const [checkedColumnOption, setCheckedColumnOption] = useState([]);
  const [fullDataToDownloadLoader, setFullDataToDownloadLoader] = useState(false);
  const [page, setPage] = useState(1);
  const [pageFilter, setPageFilter] = useState(1);
  const [numRows, setNumRows] = useState(1);
  const [accessGranted, setAccessGranted] = useState(true);
  const [file_Modal_Loader, setFile_Modal_Loader] = useState(false);
  const [sortColumn, setSortColumn] = useState('');
  const [sortOrder, setSortOrder] = useState('');
  const [noData, setNoData] = useState(false);
  const [noDataError, setNoDataError] = useState(false);
  const [dateFromFile, setDateFromFile] = useState(null);
  const [maxRowsPerSheet, setMaxRowsPerSheet] = useState(700000);
  const userId = sessionStorage.getItem('userId');
  const [cancelTokenSource, setCancelTokenSource] = useState(null);
  const [startDateTable, setStartDate] = useState(null);
  const [endDateTable, setEndDate] = useState(null);
  const [selectedItems, setSelectedItems] = useState();
  const [pageWithDate, setPageWithDate] = useState(false);
  const [OPTIONS, setOPTIONS] = useState([]);
  const [columnOPTIONS, setColumnOPTIONS] = useState([]);
  const [searchTextForFilter, setSearchTextForFilter] = useState('');
  const [dropdownSelectedColumn, setDropdownSelectedColumn] = useState('');
  const [searchTerm, setSearchTerm] = useState('');
  const [showConsentForm, setShowConsentForm] = useState(false);
  const [isChecked, setIsChecked] = useState(false);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [fileDownloadRequest, setFileDownloadRequest] = useState(null);
  const [downloadFileName, setDownloadFileName] = useState();
  const [columns, setColumns] = useState([]);
  const [dropdownSelectedColumnsFormCheckBox, setDropdownSelectedColumnsFormCheckBox] = useState([]);
  const [isOpen, setIsOpen] = useState(false);
  const [anchorEl, setAnchorEl] = useState(null);
  const [subMenuAnchorEl, setSubMenuAnchorEl] = useState(null);
  const [subMenuAnchorEl2, setSubMenuAnchorEl2] = useState(null);
  const [currentSubMenu, setCurrentSubMenu] = useState('');
  const [inputValue, setInputValue] = useState(700000);
  const [valueSearchText, setValueSearchText] = useState('');
  const [selectedSearchColumn, setSelectedSearchColumn] = useState('');

  const userRole = sessionStorage.getItem("userRole") || "";
  const token = sessionStorage.getItem("token");
  const pageSize = 100;

  // All your existing functions here (keeping them unchanged for brevity)...
  // [Include all the existing functions like onChange, handleClick, etc.]

  // Responsive breakpoint hook
  const [windowSize, setWindowSize] = useState({
    width: window.innerWidth,
    height: window.innerHeight,
  });

  useEffect(() => {
    const handleResize = () => {
      setWindowSize({
        width: window.innerWidth,
        height: window.innerHeight,
      });
    };

    window.addEventListener('resize', handleResize);
    return () => window.removeEventListener('resize', handleResize);
  }, []);

  // Responsive calculations
  const isXs = windowSize.width < 576;
  const isSm = windowSize.width >= 576 && windowSize.width < 768;
  const isMd = windowSize.width >= 768 && windowSize.width < 992;
  const isLg = windowSize.width >= 992 && windowSize.width < 1200;
  const isXl = windowSize.width >= 1200 && windowSize.width < 1400;
  const isXxl = windowSize.width >= 1400;

  // Dynamic modal width based on screen size
  const getModalWidth = () => {
    if (isXs) return '95%';
    if (isSm) return '90%';
    if (isMd) return '85%';
    if (isLg) return '80%';
    if (isXl) return '75%';
    return '70%';
  };

  // Dynamic grid columns for controls
  const getControlsGridCols = () => {
    if (isXs) return 1;
    if (isSm) return 2;
    if (isMd) return 3;
    return 4;
  };

  // Dynamic table height
  const getTableHeight = () => {
    const baseHeight = windowSize.height * 0.4; // 40% of viewport height
    if (isXs) return Math.min(baseHeight, 300);
    if (isSm) return Math.min(baseHeight, 400);
    if (isMd) return Math.min(baseHeight, 500);
    return Math.min(baseHeight, 600);
  };

  return (
    <>
      <Modal
        centered
        open={modalOpen}
        footer={null}
        title={null}
        width={getModalWidth()}
        style={{ 
          maxWidth: isXs ? '100vw' : '95vw',
          margin: isXs ? 0 : 'auto'
        }}
        closeIcon={fullDataToDownloadLoader ? false : true}
        maskClosable={false}
        onCancel={() => { setModalOpen(false); }}
        bodyStyle={{
          padding: isXs ? '12px' : isSm ? '16px' : '24px',
          maxHeight: '90vh',
          overflow: 'auto'
        }}
      >
        <ToastContainer />
        
        {/* Main modal content with fully responsive design */}
        <div style={{ 
          display: 'flex', 
          flexDirection: 'column', 
          gap: isXs ? '12px' : isSm ? '16px' : '20px' 
        }}>
          
          {/* Header section with adaptive layout */}
          <div style={{
            display: 'flex',
            flexDirection: isLg ? 'row' : 'column',
            alignItems: isLg ? 'center' : 'stretch',
            justifyContent: isLg ? 'space-between' : 'flex-start',
            gap: isXs ? '12px' : '16px',
            marginBottom: isXs ? '8px' : '16px'
          }}>
            
            {/* Control components - fully responsive grid */}
            <div style={{
              display: 'grid',
              gridTemplateColumns: `repeat(${getControlsGridCols()}, 1fr)`,
              gap: isXs ? '8px' : isSm ? '12px' : '16px',
              width: '100%',
              maxWidth: isLg ? '70%' : '100%'
            }}>
              
              {/* File selector - spans full width on mobile */}
              <div style={{ 
                gridColumn: isXs ? 'span 1' : isSm ? 'span 2' : isLg ? 'span 1' : 'span 1',
                minWidth: 0 // Prevents overflow
              }}>
                <FormControl 
                  sx={{ 
                    width: '100%', 
                    minWidth: 120,
                    '& .MuiInputLabel-root': {
                      fontSize: isXs ? '12px' : '14px'
                    }
                  }} 
                  size="small"
                >
                  <InputLabel 
                    style={{ 
                      height: "32px", 
                      paddingRight: "10px", 
                      paddingBottom: "10px", 
                      fontSize: isXs ? "10px" : "12px",
                      whiteSpace: 'nowrap',
                      overflow: 'hidden',
                      textOverflow: 'ellipsis'
                    }}
                  >
                    {fileNameToSend}
                  </InputLabel>
                  <AntSelect
                    label={fileNameToSend}
                    open={isOpen}
                    onOpen={() => setIsOpen(true)}
                    onClose={() => setIsOpen(false)}
                    MenuProps={{ 
                      PaperProps: { 
                        style: { 
                          width: 'auto',
                          minWidth: isXs ? 250 : 300,
                          maxWidth: '95vw',
                          maxHeight: '60vh'
                        } 
                      } 
                    }}
                    style={{ height: 32, width: '100%' }}
                  >
                    <TextField
                      placeholder="Select Column Name"
                      fullWidth
                      InputProps={{ 
                        style: { 
                          height: 25,
                          fontSize: isXs ? '12px' : '14px'
                        } 
                      }}
                      onClick={(e) => e.stopPropagation()}
                      onChange={(e) => setSearchTerm(e.target.value)}
                      value={searchTerm}
                    />
                    <MenuItem onClick={(e) => e.stopPropagation()}>
                      <div onClick={(e) => e.stopPropagation()} style={{ width: '100%' }}>
                        <CheckboxComponent
                          columns={columns.filter(column => 
                            column.toLowerCase().includes(searchTerm.toLowerCase())
                          )}
                          checkedColumns={checkedColumns}
                          handleCheckboxChange={(event) => {
                            const { value, checked } = event.target;
                            if (value === 'selectAll') {
                              if (checked) {
                                setCheckedColumns(columns);
                              } else {
                                setCheckedColumns([]);
                              }
                            } else {
                              if (checked) {
                                setCheckedColumns(prevState => [...prevState, value]);
                              } else {
                                setCheckedColumns(prevState => prevState.filter(column => column !== value));
                              }
                            }
                          }}
                        />
                      </div>
                    </MenuItem>
                  </AntSelect>
                </FormControl>
              </div>

              {/* Column selector */}
              <div style={{ minWidth: 0 }}>
                <Select
                  style={{
                    width: '100%',
                    minWidth: isXs ? 100 : 120,
                    height: 32,
                    fontSize: isXs ? "10px" : "12px",
                    borderRadius: "0.4rem",
                  }}
                  mode="single"
                  showSearch
                  placeholder={isXs ? "Column" : "Select Column"}
                  onChange={(value, label) => {
                    setSelectedItems(label);
                    setDropdownSelectedColumn(label.value);
                  }}
                  filterOption={(input, option) => 
                    (option?.label ?? '').toLowerCase().includes(input.toLowerCase())
                  }
                  options={columnOPTIONS}
                />
              </div>

              {/* Search input */}
              <div style={{ minWidth: 0 }}>
                <Input
                  style={{
                    width: '100%',
                    height: 32,
                    borderRadius: "0.4rem",
                    fontSize: isXs ? "10px" : "12px"
                  }}
                  placeholder={isXs ? "Search" : "Search text"}
                  onChange={(e) => {
                    const searchValueText = e.target.value;
                    setSearchTextForFilter(searchValueText);
                    // Add your debounced search logic here
                  }}
                />
              </div>

              {/* Date picker */}
              <div style={{ minWidth: 0 }}>
                <RangePicker
                  style={{ 
                    width: '100%',
                    height: 32,
                    fontSize: isXs ? "10px" : "12px"
                  }}
                  onChange={(dates) => {
                    // Add your date change logic here
                  }}
                  disabledDate={(current) => {
                    // Add your disable date logic here
                    return false;
                  }}
                  size={isXs ? "small" : "middle"}
                />
              </div>
            </div>

            {/* Date and count info - responsive positioning */}
            <div style={{
              display: 'flex',
              flexDirection: isXs ? 'column' : 'row',
              alignItems: isXs ? 'stretch' : 'center',
              gap: isXs ? '4px' : '12px',
              fontSize: isXs ? '12px' : '14px',
              color: '#666',
              flexShrink: 0,
              textAlign: isXs ? 'center' : 'left'
            }}>
              <p style={{ margin: 0, whiteSpace: 'nowrap' }}>
                Refresh on: {dateFromFile}
              </p>
              <p style={{ margin: 0, whiteSpace: 'nowrap' }}>
                Count: {numRows.toLocaleString()}
              </p>
            </div>
          </div>

          {/* Loader or table content with dynamic height */}
          {file_Modal_Loader ? (
            <div style={{
              display: 'flex',
              flexDirection: 'column',
              alignItems: 'center',
              justifyContent: 'center',
              padding: isXs ? '32px 16px' : '48px 24px',
              height: getTableHeight()
            }}>
              <ThreeDots 
                height={isXs ? "80" : "120"} 
                width={isXs ? "60" : "100"} 
                radius="9" 
                color="#4fa94d" 
                ariaLabel="three-dots-loading" 
                visible={true} 
              />
              <p style={{ 
                marginTop: '16px', 
                fontSize: isXs ? '12px' : '14px',
                textAlign: 'center' 
              }}>
                Please Wait, Data is loading...
              </p>
            </div>
          ) : (
            <div style={{ 
              overflow: 'hidden',
              border: '1px solid #e0e0e0',
              borderRadius: '8px'
            }}>
              <div style={{ 
                height: getTableHeight(),
                overflow: 'auto'
              }}>
                {accessGranted ? (
                  <Table 
                    data={pdata} 
                    searchTextValue={valueSearchText} 
                    SearchTextData={(page, column, searchText) => {
                      // Add your search logic here
                    }} 
                    searchColumn={selectedSearchColumn} 
                    endDateTable={endDateTable}
                    responsive={true}
                    size={isXs ? 'small' : 'middle'}
                  />
                ) : (
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    justifyContent: 'center',
                    height: '100%',
                    padding: '24px'
                  }}>
                    <p style={{
                      fontSize: isXs ? '16px' : isSm ? '18px' : '20px',
                      fontWeight: 'bold',
                      color: '#666',
                      textAlign: 'center',
                      margin: 0
                    }}>
                      {noData ? 
                        (noDataError ? 'NO Data Found...' : 'Hmm...something seems to have gone wrong.') : 
                        "You don't have access to this data."
                      }
                    </p>
                  </div>
                )}
              </div>
            </div>
          )}

          {/* Pagination and download section - fully responsive */}
          <div style={{
            display: 'flex',
            flexDirection: isLg ? 'row' : 'column',
            alignItems: isLg ? 'center' : 'stretch',
            justifyContent: isLg ? 'space-between' : 'flex-start',
            gap: isXs ? '12px' : '16px',
            paddingTop: '16px',
            borderTop: '1px solid #e0e0e0'
          }}>
            
            {/* Pagination with responsive sizing */}
            {numRows > 0 && (
              <div style={{
                display: 'flex',
                flexDirection: isXs ? 'column' : 'row',
                alignItems: isXs ? 'center' : 'center',
                gap: isXs ? '8px' : '16px',
                flexWrap: 'wrap'
              }}>
                <div style={{ 
                  fontSize: isXs ? '12px' : '14px',
                  color: '#666',
                  textAlign: 'center'
                }}>
                  Rows per Page: {pageSize}
                </div>
                <Stack spacing={1}>
                  <Pagination 
                    count={Math.ceil(numRows / pageSize)} 
                    page={page} 
                    onChange={(event, value) => {
                      // Add your pagination logic here
                    }}
                    size={isXs ? "small" : "medium"}
                    siblingCount={isXs ? 0 : 1}
                    boundaryCount={isXs ? 1 : 2}
                  />
                </Stack>
              </div>
            )}

            {/* Download button section with responsive sizing */}
            {sessionStorage.getItem('userDownload') === '1' && (
              <div style={{
                display: 'flex',
                justifyContent: isLg ? 'flex-end' : 'center',
                width: isLg ? 'auto' : '100%'
              }}>
                {fullDataToDownloadLoader ? (
                  <div style={{
                    display: 'flex',
                    alignItems: 'center',
                    gap: isXs ? '8px' : '12px',
                    padding: '8px 12px',
                    backgroundColor: '#f5f5f5',
                    borderRadius: '8px',
                    width: isXs ? '100%' : 'auto',
                    justifyContent: 'space-between'
                  }}>
                    <p style={{ 
                      fontSize: isXs ? '12px' : '14px',
                      margin: 0,
                      color: '#666'
                    }}>
                      Downloading...
                    </p>
                    <Box sx={{ 
                      width: isXs ? '120px' : '200px',
                      height: "20px"
                    }}>
                      <LinearProgress />
                    </Box>
                    <button 
                      onClick={() => {
                        if (cancelTokenSource) {
                          cancelTokenSource.cancel('Download canceled');
                          sessionStorage.setItem("process", false);
                          setCancelTokenSource(null);
                          setFullDataToDownloadLoader(false);
                        }
                      }}
                      style={{
                        padding: '4px',
                        border: 'none',
                        background: 'transparent',
                        borderRadius: '4px',
                        cursor: 'pointer',
                        display: 'flex',
                        alignItems: 'center',
                        justifyContent: 'center'
                      }}
                      onMouseEnter={(e) => e.target.style.backgroundColor = '#e0e0e0'}
                      onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
                    >
                      <IoMdClose fill="red" size={isXs ? 12 : 15} />
                    </button>
                  </div>
                ) : (
                  <Button
                    id="download-button"
                    aria-controls={anchorEl ? 'download-menu' : undefined}
                    aria-haspopup="true"
                    aria-expanded={anchorEl ? 'true' : undefined}
                    onClick={handleClick}
                    variant="contained"
                    endIcon={<ArrowDropDownIcon />}
                    style={{ 
                      color: 'black', 
                      backgroundColor: '#e5e5ea',
                      width: isXs ? '100%' : 'auto',
                      minWidth: isXs ? '100%' : '140px',
                      height: '40px',
                      fontSize: isXs ? '12px' : '14px'
                    }}
                  >
                    Download
                  </Button>
                )}
                
                {/* Download menus with responsive positioning */}
                <Menu
                  id="download-menu"
                  anchorEl={anchorEl}
                  open={Boolean(anchorEl)}
                  onClose={handleClose}
                  MenuListProps={{
                    'aria-labelledby': 'download-button',
                  }}
                  PaperProps={{
                    style: {
                      maxWidth: '90vw',
                      fontSize: isXs ? '12px' : '14px'
                    }
                  }}
                >
                  <MenuItem onClick={(event) => handleSubMenuClick(event, 'currentPage')}>
                    Current Page Download
                  </MenuItem>
                  <MenuItem onClick={(event) => handleSubMenuClick(event, 'fullFile')}>
                    {searchTextForFilter !== '' ? 'Filter Full Data Download' : 'Full File Download'}
                  </MenuItem>
                </Menu>
              </div>
            )}
          </div>

          {/* Consent form modal with responsive sizing */}
          <Modal
            centered
            open={showConsentForm}
            footer={null}
            title={null}
            width={isXs ? '95%' : isSm ? '85%' : '600px'}
            style={{ 
              maxWidth: '95vw',
              maxHeight: '90vh' 
            }}
            closeIcon={!fullDataToDownloadLoader}
            maskClosable={false}
            onCancel={() => {
              setShowConsentForm(false);
              setFileDownloadRequest(null);
              setIsChecked(false);
            }}
            bodyStyle={{
              padding: isXs ? '16px' : '24px',
              maxHeight: '80vh',
              overflow: 'auto'
            }}
          >
            <div style={{ maxWidth: '100%' }}>
              <h3 style={{ 
                fontSize: isXs ? '16px' : '18px',
                fontWeight: '600',
                marginBottom: isXs ? '12px' : '16px',
                textAlign: 'center'
              }}>
                Terms and Conditions
              </h3>
              
              <div style={{
                color: '#dc3545',
                fontSize: isXs ? '12px' : '14px',
                marginBottom: isXs ? '12px' : '16px',
                lineHeight: '1.5'
              }}>
                <p style={{ marginBottom: '8px' }}>
                  1. It is the responsibility of the concerned Business Users to validate the downloaded data.
                </p>
                <p style={{ marginBottom: '8px' }}>
                  2. The data located in the specified folder is restricted exclusively to the team members associated with given permission.
                </p>
                <p style={{ marginBottom: '8px' }}>
                  3. Any data downloaded from the specified folder will result in a transfer of ownership to the downloading team.
                </p>
                <p style={{ marginBottom: '8px' }}>
                  4. Users need to make sure to download within given timelines.
                </p>
                <p style={{ marginBottom: '8px' }}>
                  5. Any SR raised for data sets, service timeline is 7 working days.
                </p>
              </div>
              
              <div style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                marginBottom: isXs ? '12px' : '16px'
              }}>
                <input 
                  type='checkbox' 
                  id='agree' 
                  checked={isChecked} 
                  onChange={(e) => setIsChecked(e.target.checked)}
                  style={{ width: '16px', height: '16px' }}
                />
                <label 
                  htmlFor='agree' 
                  style={{ 
                    fontSize: isXs ? '12px' : '14px',
                    cursor: 'pointer'
                  }}
                >
                  I Agree
                </label>
              </div>

              {/* Rows per sheet slider - only show for full file downloads */}
              {isChecked && fileDownloadRequest && fileDownloadRequest.startsWith("F") && (
                <div style={{ marginBottom: isXs ? '12px' : '16px' }}>
                  <div style={{ 
                    fontSize: isXs ? '12px' : '14px',
                    fontWeight: '500',
                    marginBottom: '8px'
                  }}>
                    Rows Per Sheet:
                  </div>
                  <Row gutter={[8, 8]}>
                    <Col xs={24} sm={16}>
                      <Slider 
                        min={1} 
                        max={numRows} 
                        onChange={(value) => {
                          if (value < 0) {
                            setInputValue(1);
                          } else {
                            setInputValue(value);
                          }
                        }} 
                        value={typeof inputValue === 'number' ? inputValue : 0}
                      />
                    </Col>
                    <Col xs={24} sm={8}>
                      <InputNumber 
                        min={1} 
                        max={numRows} 
                        value={inputValue} 
                        onChange={(value) => {
                          if (value < 0) {
                            setInputValue(1);
                          } else {
                            setInputValue(value);
                          }
                        }}
                        style={{ width: '100%' }}
                      />
                    </Col>
                  </Row>
                </div>
              )}

              <div style={{
                display: 'flex',
                flexDirection: isXs ? 'column' : 'row',
                gap: isXs ? '8px' : '12px',
                justifyContent: 'center'
              }}>
                <Button 
                  variant="outlined" 
                  onClick={async () => {
                    if (fileDownloadRequest) {
                      // Add your consent update and file download logic here
                      setShowConsentForm(false);
                      setFileDownloadRequest(null);
                      setIsChecked(false);
                    }
                  }} 
                  disabled={!isChecked || isSubmitting}
                  style={{
                    width: isXs ? '100%' : 'auto',
                    minWidth: isXs ? '100%' : '80px',
                    fontSize: isXs ? '12px' : '14px'
                  }}
                >
                  {isSubmitting ? "Submitting..." : "OK"}
                </Button>
                <Button 
                  variant="outlined" 
                  onClick={() => {
                    setShowConsentForm(false);
                    setFileDownloadRequest(null);
                    setIsChecked(false);
                  }} 
                  disabled={isSubmitting}
                  style={{
                    width: isXs ? '100%' : 'auto',
                    minWidth: isXs ? '100%' : '80px',
                    fontSize: isXs ? '12px' : '14px'
                  }}
                >
                  Close
                </Button>
              </div>
            </div>
          </Modal>
        </div>
      </Modal>
    </>
  );
};

export default ClaudeResponsiveModal;


/* Custom CSS for components that need specific styling beyond Tailwind utilities */

/* Modal responsive width */
.responsive-modal .ant-modal {
  width: 95% !important;
  max-width: 1200px !important;
  margin: 0 auto;
}

@media (max-width: 768px) {
  .responsive-modal .ant-modal {
    width: 98% !important;
    margin: 10px auto;
  }
}

/* Dropdown menu adjustments */
.rs-dropdown-menu {
  position: relative;
}

.rs-dropdown-menu.rs-dropdown-menu {
  right: auto;
  left: 100%;
  position: absolute;
  top: 0;
  right: 0;
}

/* Pagination active styles */
.ant-pagination .ant-pagination-item:not(.ant-pagination-item-active):hover {
  transition: all 0.2s;
  background-color: #E9F0FF;
}

.ant-pagination .ant-pagination-item-active {
  background-color: #4968ff !important;
  color: white !important;
  font-weight: 400;
  border-color: #4968ff !important;
}

.ant-pagination .ant-pagination-item-active a {
  color: white !important;
}

/* Ant Design Input customization */
.ant-input {
  @apply rounded-r-md border border-gray-300;
  border-bottom-right-radius: 0.4rem !important;
  border-top-right-radius: 0.4rem !important;
  border: 1px solid #E7E7E7 !important;
}

/* Custom select styling */
.customSelect {
  appearance: none;
  -webkit-appearance: none;
  -moz-appearance: none;
  /* background: url('../../../../Assets/Union) 2.svg') no-repeat calc(100% - 0.9vw) center; */
  @apply pr-4 border border-gray-300 rounded text-base;
}

/* File modal specific styles */
.filemodal_header_noclose.modal-header, 
.filemodal_header.modal-header {
  @apply flex relative border-b-0;
  height: 60px !important;
}

.filemodal_header_noclose.modal-header {
  @apply w-full whitespace-nowrap;
}

.modal-header .btn-close {
  margin-top: -11px;
}

.modal-dialog-centered {
  @apply flex justify-center items-center;
}

.multiselect {
  @apply w-full;
}

.ant-collapse-header {
  @apply relative;
}

/* Checkbox styling in modal */
.fileModalCheckbox .modelCheckboxes input[type="checkbox"] {
  height: 14px;
  width: 14px;
  @apply mr-1;
}

/* Responsive utilities using Tailwind breakpoints */

/* Mobile First Approach - Base styles for mobile */
@media (max-width: 640px) {
  /* Stack form controls vertically on mobile */
  .responsive-form-grid {
    @apply grid grid-cols-1 gap-2;
  }
  
  /* Full width buttons on mobile */
  .responsive-button {
    @apply w-full;
  }
  
  /* Adjust modal padding on mobile */
  .responsive-modal-content {
    @apply p-2;
  }
  
  /* Smaller text on mobile */
  .responsive-text {
    @apply text-sm;
  }
  
  /* Reduce table height on mobile */
  .responsive-table-container {
    @apply max-h-64;
  }
}

/* Small tablets and large phones */
@media (min-width: 641px) and (max-width: 768px) {
  .responsive-form-grid {
    @apply grid-cols-2 gap-3;
  }
  
  .responsive-modal-content {
    @apply p-4;
  }
  
  .responsive-table-container {
    @apply max-h-80;
  }
}

/* Tablets */
@media (min-width: 769px) and (max-width: 1024px) {
  .responsive-form-grid {
    @apply grid-cols-3 gap-4;
  }
  
  .responsive-modal-content {
    @apply p-6;
  }
  
  .responsive-table-container {
    @apply max-h-96;
  }
}

/* Desktop */
@media (min-width: 1025px) {
  .responsive-form-grid {
    @apply grid-cols-4 gap-4;
  }
  
  .responsive-modal-content {
    @apply p-6;
  }
  
  .responsive-table-container {
    max-height: 46vh;
  }
}

/* Large Desktop */
@media (min-width: 1440px) {
  .responsive-modal .ant-modal {
    max-width: 1200px !important;
  }
}

/* Print styles */
@media print {
  .responsive-modal .ant-modal {
    width: 100% !important;
    max-width: none !important;
    box-shadow: none !important;
  }
  
  .ant-modal-mask {
    display: none !important;
  }
}

/* High DPI displays */
@media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
  .responsive-modal-content {
    /* Ensure crisp rendering on high DPI displays */
    -webkit-font-smoothing: antialiased;
    -moz-osx-font-smoothing: grayscale;
  }
}

/* Dark mode support (if needed) */
@media (prefers-color-scheme: dark) {
  .responsive-modal .ant-modal-content {
    @apply bg-gray-800 text-white;
  }
  
  .responsive-modal .ant-input {
    @apply bg-gray-700 border-gray-600 text-white;
  }
}

/* Reduced motion preference */
@media (prefers-reduced-motion: reduce) {
  .ant-pagination .ant-pagination-item:not(.ant-pagination-item-active):hover {
    transition: none;
  }
}

/* Focus styles for accessibility */
.responsive-modal .ant-btn:focus,
.responsive-modal .ant-input:focus,
.responsive-modal .ant-select:focus {
  @apply outline-2 outline-blue-500 outline-offset-2;
}

/* Loading spinner container responsive */
.responsive-loader-container {
  @apply flex flex-col items-center justify-center py-8;
}

@media (min-width: 640px) {
  .responsive-loader-container {
    @apply py-12;
  }
}

@media (min-width: 1024px) {
  .responsive-loader-container {
    @apply py-16;
  }
}

/* Download section responsive styles */
.responsive-download-section {
  @apply flex flex-col items-center gap-2 p-2 bg-gray-50 rounded-lg w-full;
}

@media (min-width: 640px) {
  .responsive-download-section {
    @apply flex-row gap-3 w-auto;
  }
}

/* Consent form responsive styles */
.responsive-consent-form {
  @apply p-4 max-w-lg mx-auto;
}

@media (min-width: 640px) {
  .responsive-consent-form {
    @apply p-6;
  }
}

/* Responsive grid for form controls */
.responsive-control-grid {
  @apply grid grid-cols-1 gap-2;
}

@media (min-width: 640px) {
  .responsive-control-grid {
    @apply grid-cols-2 gap-3;
  }
}

@media (min-width: 1024px) {
  .responsive-control-grid {
    @apply grid-cols-4 gap-4;
  }
}

/* Responsive typography */
.responsive-title {
  @apply text-lg font-semibold;
}

@media (min-width: 640px) {
  .responsive-title {
    @apply text-xl;
  }
}

@media (min-width: 1024px) {
  .responsive-title {
    @apply text-2xl;
  }
}

/* Responsive spacing */
.responsive-section-spacing {
  @apply mb-4;
}

@media (min-width: 640px) {
  .responsive-section-spacing {
    @apply mb-6;
  }
}

@media (min-width: 1024px) {
  .responsive-section-spacing {
    @apply mb-8;
  }
}

/* Menu responsive width */
.ant-dropdown .ant-dropdown-menu {
  max-width: 90vw;
}

@media (max-width: 640px) {
  .ant-dropdown .ant-dropdown-menu {
    max-width: 95vw;
  }
}

/* Ensure all interactive elements are touch-friendly on mobile */
@media (max-width: 768px) {
  .ant-btn,
  .ant-input,
  .ant-select-selector,
  .ant-picker {
    min-height: 44px;
  }
  
  .ant-pagination-item {
    min-width: 44px;
    min-height: 44px;
  }
}